{"version":3,"sources":["components/UserSignup.js","components/MessageList.js","components/SendMessage.js","components/TypingIndicator.js","components/OnlineUsers.js","components/NewRoom.js","components/RoomList.js","components/ChatScreen.js","App.js","index.js"],"names":["UserSignup","props","state","username","onChange","bind","onSubmit","event","this","setState","target","value","preventDefault","className","type","placeholder","required","React","Component","MessageList","updateScroll","element","document","querySelector","scrolled","scrollTop","scrollHeight","setInterval","onScroll","messages","map","message","index","key","currentUser","id","senderId","text","SendMessage","currentRoom","length","TypingIndicator","allUsersTyping","slice","join","OnlineUsers","name","users","user","presenceState","presence","renderUsers","WhoisOnlineItem","style","backgroundColor","children","NewRoom","roomName","createRoom","RoomList","rooms","room","onClick","subscribeToRoom","href","ChatScreen","joinableRooms","joinedRooms","patientStatus","sendMessage","userTypingEvent","buttonMessage","isTypingIn","roomId","catch","error","console","Chatkit","ChatManager","instanceLocator","userId","currentUsername","tokenProvider","TokenProvider","url","method","connect","then","getRooms","messageLimit","hooks","onMessage","onUserStartedTyping","onUserStoppedTyping","filter","onPresenceChanged","forceUpdate","onUserJoined","getJoinableRooms","err","log","sendSimpleMessage","App","onUserSubmitted","currentScreen","a","fetch","headers","body","JSON","stringify","status","sessionStorage","setItem","path","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d3aca92a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass UserSignup extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: null\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(event) {\r\n        this.setState({\r\n            username: event.target.value\r\n            }\r\n        )\r\n    }\r\n\r\n    onSubmit (event){\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.state.username)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <div className=\"login-triangle\">\r\n            </div>\r\n                <h1 className=\"login-header\">Welcome</h1>\r\n                <form className=\"login-container\" onSubmit={this.onSubmit}>\r\n                    <input type=\"text\" placeholder=\"Username\" onChange={this.onChange} required=\"required\"/>\r\n                    <input type=\"password\" placeholder=\"Password\"/>\r\n                    <input type=\"submit\"/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserSignup;","import React from \"react\";\r\n\r\nclass MessageList extends React.Component {\r\n\r\n    componentDidUpdate() {\r\n        setInterval(this.updateScroll,1000);\r\n    }\r\n\r\n    updateScroll = () => {\r\n        let element = document.querySelector('.message-list-container');\r\n        if (this.props.scrolled === false) {\r\n            element.scrollTop = element.scrollHeight;\r\n        }\r\n    };\r\n\r\n    render () {\r\n        return(\r\n            <div className=\"message-list-container\" onScroll={() => this.props.onScroll()}>\r\n                {this.props.messages.map((message, index) => {\r\n                        return <div key={index}>\r\n                            <div className=\"message-item\">\r\n                                <span>{this.props.currentUser.id === message.senderId ? <strong><font className=\"special-text\">{message.senderId}</font></strong> : <strong>{message.senderId}</strong>}</span>\r\n                                <br/>\r\n                                <p className=\"message-list-text\">{message.text}</p>\r\n                            </div>\r\n                            <br/>\r\n                        </div>\r\n                    }\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default MessageList;","import React from 'react';\r\n\r\nclass SendMessage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: ''\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(event) {\r\n        this.setState({text: event.target.value});\r\n        if (this.props.onChange) {\r\n            this.props.onChange()\r\n        }\r\n    }\r\n\r\n    onSubmit (event){\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.state.text);\r\n        this.setState({text: ''})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"message-form-container\">\r\n                <div className=\"message-form\">\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <input className=\"message-form-input\" type=\"text\" placeholder={\"Message #\" + this.state.currentRoom} onChange={this.onChange} value={this.state.text}/>\r\n                    </form>\r\n                </div>\r\n                {this.state.text.length > 2 ? <div className=\"message-form-return\">Hit Enter to Send</div> : \"\"}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SendMessage;","import React from \"react\";\r\n\r\nclass TypingIndicator extends  React.Component{\r\n    render() {\r\n        if (this.props.allUsersTyping.length > 0) {\r\n            return (\r\n                <div className=\"whos-typing-container\">\r\n                    {`${this.props.allUsersTyping.slice(0, 2).join(\" and \")} is typing...`}\r\n                </div>\r\n            )\r\n        }\r\n        return <div/>\r\n    }\r\n}\r\n\r\nexport default TypingIndicator;","import React from \"react\";\r\nimport './Stylesheet.css';\r\n\r\nclass OnlineUsers extends React.Component {\r\n    renderUsers() {\r\n        return(\r\n            <div>\r\n                <h3 className=\"whos-online-header\">Current Room</h3>\r\n                <h5 className=\"whos-online-room\">#{this.props.currentRoom.name}</h5>\r\n                <br />\r\n                <h3 className=\"whos-online-members\">{this.props.users.length === 1 ? this.props.users.length + \" Member\" : this.props.users.length + \" Members\"}</h3>\r\n            <ul className=\"whos-online-list\">\r\n                {this.props.users.map((user, index) => {\r\n                    if (user.id === this.props.currentUser.id){\r\n                        return (\r\n                            <WhoisOnlineItem key={index} presenceState=\"online\"> {user.name} (You)</WhoisOnlineItem>\r\n                        )\r\n                    }\r\n                    return (\r\n                        <WhoisOnlineItem key={index} presenceState={user.presence.state}>\r\n                            {user.name}\r\n                        </WhoisOnlineItem>\r\n                    )\r\n                })}\r\n            </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        if(this.props.users){\r\n            return this.renderUsers()\r\n        } else {\r\n            return <p>Loading Users...</p>\r\n        }\r\n    }\r\n}\r\n\r\nclass WhoisOnlineItem extends React.Component {\r\n    render() {\r\n        return (\r\n            <li className=\"OnlineUsersListElement\">\r\n                <div className=\"OnlineUsersDivElement\" style={{backgroundColor: this.props.presenceState === 'online' ? '#43ff4b' : '#434956'}}/>\r\n                {this.props.children}\r\n            </li>\r\n        )\r\n    }\r\n}\r\nexport default OnlineUsers;","import React from \"react\";\r\n\r\nclass NewRoom extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state ={\r\n            roomName: ''\r\n        };\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(event){\r\n        this.setState({\r\n            roomName: event.target.value\r\n        });\r\n    }\r\n\r\n    onSubmit(event){\r\n        event.preventDefault();\r\n        this.props.createRoom(this.state.roomName);\r\n        this.setState({roomName: ''})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.onSubmit} >\r\n                    <input value={this.state.roomName} onChange={this.onChange} type=\"text\" placeholder=\"Enter New Room\"/>\r\n                        <input type='submit'/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default NewRoom;","import React from 'react';\r\n\r\nclass RoomList extends React.Component {\r\n    render () {\r\n        return (\r\n            <div className=\"rooms-list\">\r\n                <ul>\r\n                    <h3>Your rooms:</h3>\r\n                    {this.props.rooms.map(room => {\r\n                        return (\r\n                            <li key={room.id} className=\"room\">\r\n                                <a\r\n                                    onClick={() => this.props.subscribeToRoom(room.id)}\r\n                                    href=\"/#\">#{room.name}\r\n                                </a>\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RoomList;","import React from 'react';\r\nimport Chatkit from '@pusher/chatkit-client';\r\nimport MessageList from \"./MessageList\";\r\nimport SendMessage from \"./SendMessage\";\r\nimport TypingIndicator from \"./TypingIndicator\";\r\nimport OnlineUsers from \"./OnlineUsers\";\r\nimport NewRoom from \"./NewRoom\";\r\nimport RoomList from \"./RoomList\";\r\nimport './Stylesheet.css';\r\n\r\n\r\nclass ChatScreen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            messages: [],\r\n            joinableRooms: [],\r\n            joinedRooms: [],\r\n            currentUser: {},\r\n            currentRoom: {},\r\n            allUsersTyping: [],\r\n            scrolled: false,\r\n            patientStatus: [\"Patient has Arrived\", \"Patient is in Surgery\", \"Patient has Left\"]\r\n        };\r\n\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.userTypingEvent = this.userTypingEvent.bind(this);\r\n        this.createRoom = this.createRoom.bind(this);\r\n        this.subscribeToRoom = this.subscribeToRoom.bind(this);\r\n        this.buttonMessage = this.buttonMessage.bind(this);\r\n    }\r\n\r\n    userTypingEvent() {\r\n        this.state.currentUser\r\n            .isTypingIn({roomId: this.state.currentRoom.id})\r\n            .catch(error => console.error('error is:', error)\r\n            )}\r\n\r\n    sendMessage(text) {\r\n        this.state.currentUser.sendMessage({\r\n            text,\r\n            roomId: this.state.currentRoom.id\r\n        });\r\n        this.setState({\r\n            scrolled: false\r\n        })\r\n    }\r\n    componentDidMount() {\r\n        const chatManager = new Chatkit.ChatManager({\r\n            instanceLocator: 'v1:us1:cda0f940-152b-46e7-b38b-e20c2eb435de',\r\n            userId: this.props.currentUsername,\r\n            tokenProvider: new Chatkit.TokenProvider({\r\n                url: `http://localhost:8080/authenticate`,\r\n                method: 'POST'\r\n            })\r\n        });\r\n\r\n        chatManager.connect()\r\n            .then(currentUser => {\r\n            this.setState({ currentUser });\r\n            this.getRooms();\r\n                return currentUser.subscribeToRoom({\r\n                    roomId: \"c1d18c50-bb59-41aa-a7e9-706f7b158b2a\",\r\n                    messageLimit: 100,\r\n                    hooks: {\r\n                        onMessage: message => {\r\n                            this.setState({\r\n                                messages: [...this.state.messages, message]\r\n                            })\r\n                        },\r\n                        onUserStartedTyping: user => {\r\n                            this.setState({\r\n                                allUsersTyping: [...this.state.allUsersTyping, user.name]\r\n                            })\r\n                        },\r\n                        onUserStoppedTyping: user => {\r\n                            this.setState({\r\n                                allUsersTyping: this.state.allUsersTyping.filter(\r\n                                    username => username !== user.name\r\n                                )\r\n                            })\r\n                        },\r\n                        onPresenceChanged: () => this.forceUpdate(),\r\n                        onUserJoined: () => this.forceUpdate(),\r\n                    }\r\n                })\r\n            })\r\n            .then(currentRoom => {\r\n                this.setState({currentRoom})\r\n            })\r\n            .catch(error => console.error('error', error))\r\n    }\r\n\r\n    getRooms() {\r\n        this.state.currentUser.getJoinableRooms()\r\n            .then(joinableRooms => {\r\n                this.setState({\r\n                    joinableRooms,\r\n                    joinedRooms: this.state.currentUser.rooms\r\n                })\r\n            })\r\n            .catch(err => console.log('error on joining rooms: ', err))\r\n    }\r\n\r\n    subscribeToRoom(roomId) {\r\n        this.setState({messages: []});\r\n        this.state.currentUser.subscribeToRoom({\r\n            roomId: roomId,\r\n            hooks: {\r\n                onMessage: message => {\r\n                    this.setState({\r\n                        messages: [...this.state.messages, message]\r\n                    })\r\n                },\r\n                onUserStartedTyping: user => {\r\n                    this.setState({\r\n                        allUsersTyping: [...this.state.allUsersTyping, user.name]\r\n                    })\r\n                },\r\n                onUserStoppedTyping: user => {\r\n                    this.setState({\r\n                        allUsersTyping: this.state.allUsersTyping.filter(\r\n                            username => username !== user.name\r\n                        )\r\n                    })\r\n                },\r\n                onPresenceChanged: () => this.forceUpdate(),\r\n                onUserJoined: () => this.forceUpdate(),\r\n            },\r\n        })\r\n            .then(currentRoom => {\r\n                this.setState({currentRoom});\r\n            })\r\n            .catch(err => console.log('error on subscribing to rooms:', err))\r\n\r\n    }\r\n\r\n    buttonMessage() {\r\n        this.state.currentUser.sendSimpleMessage({\r\n            roomId: this.state.currentRoom.id,\r\n            text: this.state.patientStatus[0]\r\n        })\r\n            .catch(err => {\r\n                console.log(`error adding message to ${this.state.currentRoom.name}: ${err}`)\r\n            })\r\n    }\r\n\r\n    createRoom(name) {\r\n        if (name == null) {\r\n            console.log('error')\r\n        } else {\r\n            this.state.currentUser.createRoom({\r\n                name\r\n            })\r\n                .then(room => {\r\n                    this.subscribeToRoom(room.id);\r\n                    console.log(`Created room: ${room.name}`)\r\n                })\r\n                .catch(error => console.error('error is:', error))\r\n        }\r\n    }\r\n\r\n    onScroll = () => {\r\n        this.setState({\r\n            scrolled: true\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"chatContainer\">\r\n                    <div className=\"whosOnlineListContainer\">\r\n                        <OnlineUsers currentRoom={this.state.currentRoom} currentUser={this.state.currentUser} users={this.state.currentRoom.users}/>\r\n                        <RoomList subscribeToRoom={this.subscribeToRoom} rooms={[...this.state.joinableRooms, ...this.state.joinedRooms]}/>\r\n                    </div>\r\n                    <div className=\"chatListContainer\">\r\n                        <MessageList messages={this.state.messages} scrolled={this.state.scrolled} onScroll={this.onScroll} currentUser={this.state.currentUser}/>\r\n                        <TypingIndicator allUsersTyping={this.state.allUsersTyping}/>\r\n                        <SendMessage onSubmit={this.sendMessage} onChange={this.userTypingEvent} currentRoom={this.state.currentRoom}/>\r\n                    </div>\r\n                    <form>\r\n                        <input type=\"button\" placeholder=\"Patient has arrived.\" value=\"Patient has arrived.\" onClick={this.buttonMessage}/>\r\n                        <input type=\"button\" placeholder=\"Patient is in surgery.\" value=\"Patient is in surgery.\"/>\r\n                        <input type=\"button\" placeholder=\"Patient has left.\" value=\"Patient has left.\"/>\r\n                    </form>\r\n                </div>\r\n                <div>\r\n                    <NewRoom createRoom={this.createRoom}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChatScreen;","import React, { Component } from 'react';\r\nimport UserSignup from './components/UserSignup';\r\nimport ChatScreen from './components/ChatScreen';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.onUserSubmitted = this.onUserSubmitted.bind(this);\r\n        this.state =  {\r\n            currentScreen: 'UsernameScreen',\r\n            currentUsername: ''\r\n        }\r\n    }\r\n\r\n    onUserSubmitted (username) {\r\n        (async () => {\r\n            try {\r\n                const res = await fetch(`http://localhost:8080/users`,{\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({username})\r\n\r\n                });\r\n                if (res.status !== 204){\r\n                    this.setState({\r\n                        currentUsername: username,\r\n                        currentScreen: 'ChatScreen'\r\n                    });\r\n                    sessionStorage.setItem('username', username);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        })();\r\n    }\r\n\r\n    render() {\r\n        if (this.state.currentScreen === 'UsernameScreen'){\r\n            return(\r\n            <div>\r\n                <UserSignup onSubmit={this.onUserSubmitted}/>\r\n            </div>\r\n            )\r\n        } else if (this.state.currentScreen === 'ChatScreen'){\r\n            return <ChatScreen currentUsername={this.state.currentUsername} path='/dashboard'/>\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}